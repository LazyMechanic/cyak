set(SUBPROJ_NAME                             {{name}})
set(${SUBPROJ_NAME}_NAMESPACE                {{get-var name "namespace" (get-project-var "namespace")}})

set(${SUBPROJ_NAME}_LANG                     {{get-var name "lang"}})
set(${SUBPROJ_NAME}_LANG_STANDARD            {{get-var name "lang_standard"}})
set(${SUBPROJ_NAME}_LANG_EXTENSIONS          {{get-var name "lang_extensions"}})
set(${SUBPROJ_NAME}_LANG_STANDARD_REQUIRED   {{get-var name "lang_standard_required"}})

set(${SUBPROJ_NAME}_ENABLE_VERSION_NAME      {{get-var name "enable_version_name"}})

set(${SUBPROJ_NAME}_MAJOR_VERSION            ${_PROJECT_MAJOR_VERSION})
set(${SUBPROJ_NAME}_MINOR_VERSION            ${_PROJECT_MINOR_VERSION})
set(${SUBPROJ_NAME}_PATCH_VERSION            ${_PROJECT_PATCH_VERSION})

set(${SUBPROJ_NAME}_VERSION
    ${${SUBPROJ_NAME}_MAJOR_VERSION}.${${SUBPROJ_NAME}_MINOR_VERSION}.${${SUBPROJ_NAME}_PATCH_VERSION})


# ############################################################### #
# Set sources ################################################### #
# ############################################################### #

# Insert here your source files
set(${SUBPROJ_NAME}_HEADERS
    )

set(${SUBPROJ_NAME}_SOURCES
    )

# Check variable
if(NOT ${${SUBPROJ_NAME}_HEADERS} OR
   NOT ${${SUBPROJ_NAME}_SOURCES})
    message(
        FATAL_ERROR
        "[target:${SUBPROJ_NAME}]:"
        "\${\${SUBPROJ_NAME}_HEADERS} or \${\${SUBPROJ_NAME}_SOURCES} are empty."
        "\nInit them and insert source files. For example:"
        "\nset(\${SUBPROJ_NAME}_HEADERS \"class.hpp\" \"funcs.hpp\" ....)"
        "\nset(\${SUBPROJ_NAME}_SOURCES \"main.cpp\"  \"class.cpp\" ....)")
endif()

set(
    ${SUBPROJ_NAME}_ALL_SRCS
    ${${SUBPROJ_NAME}_HEADERS})

# ############################################################### #
# Options ####################################################### #
# ############################################################### #

include(OptionHelpers)
generate_basic_options_executable(${SUBPROJ_NAME})

# Insert here your custom options for build:
# For example:
### set(${SUBPROJ_NAME}_INSTALL_CMAKE_PREFIX
###     "lib/cmake/${SUBPROJ_NAME}"
###     CACHE PATH "Installation directory for CMake files")
# .............................................

# ############################################################### #
# Create target for build ####################################### #
# ############################################################### #

add_executable(
    ${SUBPROJ_NAME}
    ${${SUBPROJ_NAME}_ALL_SRCS})

# Enable C++17 on this project
set_target_properties(
    ${SUBPROJ_NAME} PROPERTIES
    ${${SUBPROJ_NAME}_LANG}_STANDARD          ${${SUBPROJ_NAME}_LANG_STANDARD}
    ${${SUBPROJ_NAME}_LANG}_EXTENSIONS        ${${SUBPROJ_NAME}_LANG_EXTENSIONS}
    ${${SUBPROJ_NAME}_LANG}_STANDARD_REQUIRED ${${SUBPROJ_NAME}_LANG_STANDARD_REQUIRED})
    
# Set specific properties
set_target_properties(
    ${SUBPROJ_NAME} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    OUTPUT_NAME              "${SUBPROJ_NAME}$<$<CONFIG:Debug>:d>")

if(${${SUBPROJ_NAME}_ENABLE_VERSION_NAME})
    set_target_properties(
        ${SUBPROJ_NAME} PROPERTIES
        VERSION ${${SUBPROJ_NAME}_VERSION})
endif()

target_include_directories(
    ${SUBPROJ_NAME}
    PRIVATE   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)

# ############################################################### #
# Custom target properties ###################################### #
# ############################################################### #

# Insert here your custom target properties:
# .............................................

# ############################################################### #
# Link libraries ################################################ #
# ############################################################### #

# Insert here dependencies:
# For example:
### find_package(spdlog REQUIRED)
### target_link_libraries(
###     ${SUBPROJ_NAME}
###     spdlog)
# .............................................
    
# ############################################################### #
# Installing #################################################### #
# ############################################################### #

# Create export targets
install(
    TARGETS ${SUBPROJ_NAME}
    EXPORT  ${SUBPROJ_NAME}-targets)

# Set out paths
install(
    TARGETS ${SUBPROJ_NAME}
    RUNTIME DESTINATION  ${${SUBPROJ_NAME}_INSTALL_BIN_PREFIX}
    ARCHIVE DESTINATION  ${${SUBPROJ_NAME}_INSTALL_LIB_PREFIX}
    LIBRARY DESTINATION  ${${SUBPROJ_NAME}_INSTALL_LIB_PREFIX})