// Package templates Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// BuildHelpers.cmake
// Executable.txt.template
// General.txt.template
// Interface.txt.template
// Library.txt.template
// OptionHelpers.cmake
// TargetConfig.cmake.in.template
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildhelpersCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcf\x8e\x9b\x30\x10\xc6\xef\x91\xf2\x0e\xa3\x84\x03\x91\xda\x17\xe8\x8d\x64\xc9\x1f\x75\x43\x56\x09\x6d\xd5\x93\x45\xf0\xc0\x5a\x05\x1b\xd9\x46\x6d\x85\x78\xf7\xca\xd8\x04\xd3\x6e\x4f\xad\x4f\x19\x33\xf3\xcd\x6f\xbe\x71\xd6\xb0\xfe\xb7\x03\xeb\xe5\x62\x0d\x91\x2c\xd5\x07\xf3\x03\xe0\xd2\x68\x26\xb8\x0b\xcc\x39\xed\xc9\xd3\x69\xbf\x8f\xaf\x71\x92\xba\x2b\xc8\x45\xf3\x13\x0a\x56\xa1\x02\x56\x00\x65\x45\x81\x12\xb9\x86\x50\x0c\xd5\x59\xb5\x71\x62\x1c\x21\x93\xa5\xa7\x96\x46\xd7\x43\xfc\xd0\xb1\xc7\x0a\x7d\x67\x55\x05\x77\x34\xda\x0c\x29\xdc\xb1\x10\x12\xe1\xde\xb2\x8a\x82\x7e\x65\x0a\x74\x26\x4b\xd4\x93\xd4\x53\x7c\x4b\x4f\x49\x94\x9e\x2e\xc9\x24\x25\x2a\x8a\x12\x28\x2a\xcd\x78\x66\x58\x6c\xfe\xb9\xad\x34\x33\x28\xca\x63\xd9\x9f\x9e\xe3\x1b\x79\x89\xd2\x34\xbe\x26\x37\x9f\xa5\x10\x72\x98\xf1\x1d\x48\x2c\xf1\x07\xa8\xb6\x69\x84\x46\x6a\x6a\xff\x83\xe1\x45\xcb\x73\xc3\x16\x9a\x1e\x64\x68\x49\xec\xbc\x64\x98\x77\xb3\x5c\x18\x16\x85\xda\x19\xaa\x66\x5b\xf0\x3f\x73\xfc\x9c\x55\x2d\x9a\x05\x8e\xde\x7a\xbe\x78\x99\xb5\x71\x60\xca\x9d\xcf\xee\xf2\xf2\x3a\xfb\x86\xa4\xc9\xa4\x42\x92\xc9\xb2\xad\x91\x6b\x15\x6e\x8f\xb0\x0a\x3a\x07\xd2\xaf\x86\xc0\x6b\x6b\x6f\xe6\xf2\xf6\x2e\xba\x1e\x92\x7e\xb5\x59\x2e\xac\xba\x99\x33\x3c\x3c\x5f\xb6\xb6\x39\x04\xdd\xf6\x48\xe6\x1c\xfd\x23\xd9\x20\x93\xdd\xe5\x7c\x8e\x92\xa7\x61\x15\x0e\x91\x15\x10\x0e\x85\xbe\x21\xbd\xfb\xf8\x66\x21\x61\x05\x79\xbc\x50\x97\x88\x9c\xb2\x22\x9c\x35\xdb\x5d\x5e\xbe\x12\xeb\xe0\x0d\x56\x1e\xb5\x90\x98\xe5\xaf\xa1\x01\xfd\x1b\xf2\xd8\xbb\x44\x3d\x6c\x93\x67\x35\x92\x5c\xd4\x8d\xe0\xc8\x75\xb8\xfb\x74\x35\x94\x4e\x1d\x82\xce\x28\xf4\x90\x44\xe7\x98\x7c\x89\xbd\xfa\x8c\x52\x92\xb7\x4a\x8b\x9a\xd8\xc7\x1e\x06\xdd\xbc\xb8\x9f\x92\xcd\x19\xe7\x0c\xba\xdd\x39\xfa\x18\x8f\x73\xf7\xf0\xde\xb0\x4e\xe1\xca\xf5\x1c\xd6\xb2\x3d\x12\xef\x89\x78\x0b\x7a\xd3\x8a\xa0\xf3\xc3\x1e\xfe\x20\x9a\x2c\x1d\xad\x7a\x08\x9a\x79\x28\x36\xc8\x29\xf2\x9c\xa1\xb2\x9b\x73\x75\xbf\x2b\x6f\x96\x0b\xa3\x31\xfe\x35\x36\xbf\x02\x00\x00\xff\xff\x4b\x59\x92\x9b\xdb\x04\x00\x00")

func buildhelpersCmakeBytes() ([]byte, error) {
	return bindataRead(
		_buildhelpersCmake,
		"BuildHelpers.cmake",
	)
}

func buildhelpersCmake() (*asset, error) {
	bytes, err := buildhelpersCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "BuildHelpers.cmake", size: 1243, mode: os.FileMode(438), modTime: time.Unix(1572094452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _executableTxtTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xe2\xb8\x17\x7d\x47\xe2\x3b\x58\xc0\x43\xab\xd1\xaf\x3f\xed\xd3\x4a\x55\x55\x29\x04\x77\xea\x59\x48\x58\xc7\x54\xcc\x93\x65\x92\x4b\xf1\x28\x93\xb0\x8e\x33\xc3\x0a\xe5\xbb\xaf\x1c\x1c\x1a\x20\xa1\xff\xc8\x5b\x12\x9f\x7b\xaf\xcf\x39\xbe\xd7\x19\xe8\xab\x60\x36\x9c\x52\xff\x1b\xf7\x9c\x09\x46\xad\xcf\x76\x7b\xe3\x89\x9f\x50\x14\xd7\xdd\x4e\xb7\x63\x70\x83\x6d\x1d\x59\x70\x77\x3e\xe7\x01\x73\xbc\x91\x43\x47\x07\x38\x77\xb3\x09\xb4\x48\x22\xa1\xa2\x12\xde\x06\xc6\x73\x86\xbd\x80\xf8\x5e\x70\x08\xc6\x1b\x0d\x49\x26\xd3\x24\x3b\x0b\xaf\x72\x73\x8a\xff\x9e\x11\x8a\x47\x47\xb9\x29\xfc\x93\x4b\x05\xd1\x99\x2d\x4c\x9c\x6f\x3e\xe5\x4f\x98\x9a\x2a\xea\x5b\x98\x88\x1f\xa9\x7a\x02\x65\xaa\x68\x2d\x62\x42\xbc\x16\xb4\x4c\x5e\x47\x4f\x1d\xe6\x3e\x36\xa1\xa7\x42\x87\xab\x3a\xba\xdb\xe9\x23\x92\x64\xa0\x34\x5a\x81\x02\xf4\x6f\x9a\x2b\x94\xa5\xb9\x0a\x01\x2d\x65\x0c\x59\x73\x82\x47\xec\x8c\x30\x0d\xba\x1d\x13\xb7\xd7\x6b\x25\x21\xf0\x67\xd4\xc5\x87\xeb\xfa\xa8\xff\xb9\x07\xf5\x4d\x10\x7f\xad\x8d\x8c\x1f\x0d\xb6\x0b\x72\x81\x4a\xba\x1d\x99\x84\x71\x1e\xc1\xd5\xae\xa2\x47\x88\xd7\xa0\xb2\xeb\x6e\xe7\x19\x12\x50\x42\x03\x5f\x88\x4c\x86\x3c\xdd\x15\xcc\x61\x03\x61\xae\xc5\x22\x86\x63\xba\x5a\xf5\x58\x43\x28\x97\x72\x19\x22\x1b\x03\x2d\x53\x85\x16\xb9\x8c\xa3\x5b\x03\xb8\x79\xcf\x73\x41\x09\x02\xd0\x48\xc4\x31\xd2\x42\x3d\x83\xb6\xb6\x79\xbb\x22\x17\x94\xc0\x90\x56\x8a\x50\x9a\x16\xfd\x96\x7a\x55\x56\x66\x9d\x2c\x92\x08\xad\x40\x44\xa0\x2a\x53\x57\x9a\x1d\x29\xf0\x60\xfe\xee\xdd\xbc\xb3\xed\x59\xef\x0f\xb6\xf6\xb5\x78\x05\x75\x70\x12\x06\x5b\xfb\x5a\x49\x3e\x4b\x32\xd0\x48\xc3\xcf\x35\xfa\x25\x94\x34\xe6\xe8\x76\x72\xf3\xf1\xca\xc6\xbf\xae\xde\x2d\xf2\x95\x74\xce\x78\xcc\x03\xea\xee\xf3\xb5\x6c\xa2\x68\xfb\x7f\x54\xdf\x05\x44\xea\x23\x57\x81\xd0\x50\xb9\x65\x6f\xe1\xb7\x06\xbf\xa0\x5d\x44\x14\xd5\x8f\x61\x23\x85\x6d\xcc\x54\xcc\x56\xd4\xe0\xc4\xc4\x40\xee\x97\x2f\x7f\xfc\x89\xd2\x04\xe9\x95\xcc\xd0\x5a\xa5\x3f\x20\xd4\xa5\x42\x7c\xb7\x61\xbe\x56\xe9\x1a\x94\x96\x90\x35\x27\x44\x53\xea\x4f\x31\x65\xa4\x72\x49\xf3\x10\x3c\xad\xa8\xbe\xae\x78\x81\x9e\x8e\xc0\x66\xe8\xcb\xba\xe2\x34\xef\xcb\x00\x3c\x9f\x77\xbf\xce\xd0\x62\x82\x54\xfd\xc1\xf6\xae\x10\xbd\x6c\xff\x73\xac\xd0\x99\xc7\xc8\x04\x73\x7f\xc6\xa6\x33\xc6\x47\x84\x62\x97\xf9\xf4\x3b\xea\x0d\xb6\x06\x86\x5d\xc6\x87\xc4\x73\xe8\x77\xf3\xaf\xf8\xff\x42\x26\xbd\x1d\xd2\xa1\xee\x23\x79\x7a\x3b\x32\x96\x0b\x8b\x1c\x93\x21\x35\x9f\xdf\x8f\xb4\x88\xd3\xfb\x50\xef\x68\x9f\x83\xbb\xc1\x9d\xeb\x7b\x0f\xe4\xeb\xed\x08\x16\xf9\xf3\xfd\x6d\x74\x5f\xcd\x4b\xc3\xe3\xaf\xdd\xd0\xfe\x1c\x77\xd5\x8d\xe0\x54\xcb\x83\xdb\x4a\x71\xd3\xb0\xa0\x7e\x21\x69\x5a\x70\x70\xe7\x38\x76\x81\x6d\xb7\x28\x92\x0a\x42\x9d\x2a\x09\xbb\x19\x56\x3f\x2c\x65\x97\x96\x4b\x24\x35\xfa\x2d\xe3\x18\xe5\x19\x20\x91\x21\x99\x64\x5a\xc4\xb1\x4c\x9e\xbb\x1d\xbb\x6f\x1b\x8d\xd7\xa2\x9d\x3b\xc3\x53\x4a\x9e\x1c\x66\xf8\x1f\xdc\x0d\x67\x64\x3c\xe2\xc4\x63\x98\x3e\x38\x2e\xbe\x1d\x6c\xdd\x89\xf3\x17\xe6\xee\x8c\x52\xec\x31\xdb\xf7\x4a\x15\xef\x77\xe8\xfd\xda\x77\xa2\x6b\x0c\x5c\xa0\x67\x95\xb7\x02\xcb\xc3\x87\xe2\x5d\x74\xd8\xda\x4e\x0e\x9b\x75\xaa\xb4\x6d\xe8\xe5\x50\x2d\x4b\xb4\x5a\x30\x87\x7e\xc5\x2c\x68\xd6\x04\xcf\xa7\x3e\x65\x27\x82\xfd\xcf\xc6\xaa\x19\x3f\xcd\x35\x5a\x0b\xbd\x7a\x5f\x7c\xdb\x25\xd0\x08\x07\x8c\x78\x0e\x2b\xef\xc1\xa7\xa6\x25\x5e\xc0\x4c\x43\x1f\x12\x8f\x4f\x29\x7e\x20\xf3\xe2\xa0\x57\xbc\x15\x3f\x26\xc3\x43\xbc\xed\x18\x1f\xc0\x5f\xff\x17\x00\x00\xff\xff\xad\x70\xa8\x58\x48\x0d\x00\x00")

func executableTxtTemplateBytes() ([]byte, error) {
	return bindataRead(
		_executableTxtTemplate,
		"Executable.txt.template",
	)
}

func executableTxtTemplate() (*asset, error) {
	bytes, err := executableTxtTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Executable.txt.template", size: 3400, mode: os.FileMode(438), modTime: time.Unix(1572195831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generalTxtTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xd1\x6e\xb2\x30\x1c\xc5\xef\x4d\x7c\x87\xc6\x8f\x0b\xbc\xc1\x7c\xf1\x09\x18\x36\x8a\x13\x6a\x0a\x78\xdb\x54\xe8\x14\x37\xc0\x15\xb8\x58\x9a\xbe\xfb\xd2\xd5\x92\x82\xcb\xb8\xec\xf9\xfd\x4f\xff\x3d\x87\xbc\xa2\xef\x8c\x54\x65\x5d\x56\x7d\x45\x38\xfb\xec\x4b\xce\x0a\xf7\x04\x71\x12\xa2\x18\xac\xbd\xff\xeb\xe5\x7c\x36\x9f\xb5\xac\x73\xc9\x11\xa3\x3d\x0c\x52\x12\xfb\x11\x04\xc3\x27\x84\x17\xd3\x8a\x49\xb9\x9c\x60\x07\x3f\xde\x66\xfe\x16\x0e\xd8\x81\xd6\x97\x9e\x5e\x34\x3a\x81\x23\x7f\x8f\x30\x31\xf7\x0a\xe1\x45\xf4\xd6\xf0\x13\xe3\x6d\xd9\xd4\xcf\xde\x51\x18\x4f\xf0\xb2\xfe\x03\x3f\xfa\x69\xb0\xb3\xf1\x23\xed\xf2\xab\x8d\xeb\x81\x24\x7b\x19\xb6\x0f\x93\xd4\x7e\x63\xd2\x9f\xef\xbc\xb9\xb1\xbc\x6b\x1f\x03\xff\x40\xa0\xd2\x03\x55\x53\xf4\x1f\x0c\xdc\x69\x77\xd5\x2e\xc6\x02\x23\x94\x92\x4d\x88\x81\x23\x82\xc8\x7f\x85\x24\xc8\x30\x86\x71\x4a\x12\x94\xe1\x00\x2a\xc9\x6c\xaa\xf5\x08\x6d\xb2\x03\x54\xdb\xee\x86\x19\xeb\x4c\x82\x85\x23\xa6\xe6\x72\xf5\xd3\xe1\x4a\x6f\xd1\x2e\x9e\xa3\x7d\x3c\x7b\x3e\x03\xc0\x11\xbf\x07\x2e\x3d\x5b\xb1\xb3\x1d\x29\xa3\x18\x75\x08\x8f\x4c\x5c\x8b\x52\xbf\x87\x04\xa6\xfd\xc4\xbe\xd4\x1c\x4a\x60\xba\xb0\xc4\x91\xef\x5b\xc3\x19\xcd\xaf\xa6\x11\xe0\x88\x49\x37\x0a\x53\xd5\xd0\xa2\x20\x6d\x7f\x2e\x4a\xce\xf2\xae\xe1\x5f\xee\x40\x2a\x82\xd5\x85\x71\x5a\x7e\x07\x00\x00\xff\xff\x08\x95\xad\x8a\xec\x02\x00\x00")

func generalTxtTemplateBytes() ([]byte, error) {
	return bindataRead(
		_generalTxtTemplate,
		"General.txt.template",
	)
}

func generalTxtTemplate() (*asset, error) {
	bytes, err := generalTxtTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "General.txt.template", size: 748, mode: os.FileMode(438), modTime: time.Unix(1572186577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interfaceTxtTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5f\x6f\xe2\xba\x13\x7d\x47\xe2\x3b\x58\x94\x87\xae\x56\xe5\xf7\x5e\xad\x56\x4a\x83\xfb\x6b\xf6\x42\x92\xeb\x84\x15\xfb\x64\xb9\xc9\x00\xde\xa6\x49\xae\x63\xb6\xad\x10\xdf\xfd\xca\xb1\x43\x68\x48\xd8\x2d\x37\x3c\x54\xaa\x99\x3f\x67\xce\xcc\xb1\x87\x02\xe4\x75\xb0\xb8\xf3\x89\xf7\x8d\xba\xd6\x1c\xa3\xce\xcf\x6e\x37\x71\xd9\x33\xec\xf7\x9f\x86\x03\xe5\x35\xde\x1d\xfb\xed\xcb\xbf\x81\x6f\xd9\xb8\xcd\xab\xc8\x59\xa4\x5d\xdb\x9d\xed\xe5\x92\x06\xa1\xe5\x4e\x2d\x32\x7d\xe7\x6c\xbf\xbe\x06\x92\xa5\x31\x13\x71\x67\x66\xe5\x8c\x97\x21\x76\x03\xc7\x73\x83\xf7\xce\xf8\x55\x42\x5a\xf0\x2c\x2d\xce\xba\x57\xb9\x29\xc1\x7f\x2f\x1c\x82\xa7\x8d\xdc\x04\xfe\xd9\x72\x01\xf1\x99\x12\xe6\xd6\x37\x8f\xd0\xef\x98\x28\x14\xc7\x25\xcc\xd9\xcf\x4c\x7c\x07\xa1\x50\x74\x82\x98\x3b\x6e\x87\x37\x4f\x7f\xef\xed\x5b\xa1\xfd\xd0\xe6\xed\x33\x19\x6d\x8e\xbd\x87\x83\x2b\xe4\xa4\x05\x08\x89\x36\x20\x00\xbd\x65\x5b\x81\x8a\x6c\x2b\x22\x40\x2b\x9e\x40\xd1\x9e\xe0\x01\x5b\x53\x4c\x82\xe1\x40\xc5\x1d\x8d\x4c\xa0\xab\xff\xf6\x41\x57\x2a\x88\x97\x4b\xd5\x9e\x4b\x83\xe9\x20\x3d\x20\x19\x0e\x78\x1a\x25\xdb\x18\xae\x35\xa2\x07\x48\x72\x10\xc5\xa7\xe1\x60\x0d\x29\x08\x26\x81\x3e\xb2\x82\x47\x34\xd3\x80\xe9\x06\x58\x0c\x22\x4b\x93\xb7\x26\x5d\x9d\x3c\xe7\x10\xf1\x15\x5f\x45\xc8\xc4\x40\xab\x4c\xa0\xc7\x2d\x4f\xe2\x5b\xe5\x30\xf9\xc8\xa7\xc7\x16\xcc\xf8\xa3\x60\xe2\x0d\xfd\xd2\x83\xf2\xd1\xa0\x3d\xb6\xa0\x6d\xf6\xcc\x58\xeb\xd9\x1b\xef\xce\xea\x6e\x3f\x69\x31\x38\x96\x56\x9b\xc1\x3b\xf5\xec\xfb\x9c\xed\x00\x24\x62\x49\x82\x24\x13\x6b\x90\x46\x67\x7f\x3e\xea\x3d\x12\xab\xa6\xb1\x9c\xee\x52\xe5\xe8\x85\xcb\x4d\x89\xcc\x48\x9f\xa5\x31\xd2\xf3\x5c\xdd\x02\x95\x18\x1a\x64\xdd\xab\x6f\x0f\x77\x60\xd5\x93\x33\x97\xc5\x78\x67\xfe\xad\x88\x5d\xa4\x05\x48\x24\xe1\x39\x47\xbf\x98\xe0\xec\x31\x81\xe1\x60\xab\x0e\xaf\x8d\xe5\x6f\xc2\x5b\xb3\x19\x0d\x88\x1d\x74\x0d\x44\x23\x5f\x0f\xf4\x5d\x21\x5b\x00\x93\x50\xf5\xf1\xa0\xda\x3f\x0d\xde\x73\x23\x25\x88\x15\x8b\x00\x25\x46\xb7\x1a\xd6\x70\xc0\xe2\x98\x9a\xb3\x76\xee\xf4\xa1\xe3\x86\x98\xdc\x5b\x36\x36\x0c\xe1\x54\x35\x01\xd9\x9f\x3f\xa3\xc2\xbc\x77\x28\x4b\x91\xdc\xf0\x02\xe5\x22\xfb\x09\x91\x2c\xfb\x41\x75\x1e\x9a\x8b\x2c\x07\x21\x39\x14\xed\x59\x90\x4f\x3c\x1f\x93\xd0\xc1\x41\x23\x61\xc7\x3b\x7f\xda\xc3\x63\xbb\x26\xea\x8e\xf7\xbe\x3d\x48\x6d\xd7\x1a\xe6\xf4\xdd\x3f\x8f\xe5\x60\xa7\xa7\xcb\x10\x62\xb4\x42\x63\x2e\x20\x92\x99\xe8\x64\xa6\x01\x01\x8d\xbf\xdc\x2d\x9c\xd9\x94\x1e\x4e\x6e\xc7\x3b\x7b\x6e\xfd\x85\xa9\xbd\x20\x04\xbb\x21\x0d\xbc\x05\xb1\x31\x9d\x3a\x64\xff\x55\x7b\x1f\xd1\xf6\xc5\x71\x83\x50\xc9\xa1\xf6\x37\x50\xbe\xf6\x39\xfc\x4e\x5a\x48\x96\x24\x3c\x5d\x5f\x14\xaf\xd7\xe1\x37\x42\x84\xd7\x3c\x13\xd2\x0c\x7e\x79\x5b\x95\x10\x0d\xeb\xa1\x45\xfe\x8f\xc3\xa0\x9d\x7d\xbc\xf4\x3d\x12\x9e\xb4\xe6\xc6\xc4\xaa\xdf\x6e\x15\xd0\x5c\x8a\x27\x19\xee\x9d\x19\x0e\x3a\x07\xaf\xba\x81\xb4\xed\x14\x07\xa1\xe3\x5a\xa1\x5a\xcd\x4e\x6d\xeb\x16\xda\xb3\xc5\x14\x53\x9f\xe0\x7b\x67\x59\xaf\x99\x95\xb5\xa9\x89\xaa\xcc\x68\xd4\x01\x7e\x12\x3d\xb3\x27\xa8\xd6\x33\xc3\x55\x94\xa5\x2b\xbe\xae\x4c\x50\x69\x52\xde\xf2\xcd\xa2\x2a\x66\x5a\x06\xf7\xe6\xc0\x74\x55\x7d\x2d\xbb\x36\x84\xa6\xf4\xe3\xdf\x04\xa7\xa5\x1f\xbe\xdd\xdf\xde\x7e\x84\x2a\xad\x90\x63\xa2\x1a\xb5\x36\xdf\x30\x7b\xce\x9e\xc0\x67\xd1\x13\x5b\x83\x5d\x5a\xd4\xcb\xdd\x8b\xe0\x87\xcd\x2e\xd7\x26\xd4\xec\x41\x54\x85\x31\xdc\x8c\xc6\x3b\x85\x04\xdb\x21\xbd\x73\x5c\x8b\xfc\x28\x25\xf9\xbf\x26\x4d\x86\x6b\x13\xc0\xb4\x43\x47\xa8\xb6\xf3\xf1\xae\x3c\xbd\x91\x50\xc8\x9b\x7a\x87\x3c\xec\x1f\xda\xda\xf6\xe6\xbe\x15\x3a\x77\xce\xcc\x09\x7f\x20\x2b\x7d\x73\xe1\x05\xaa\xdf\x01\x65\xcd\x3a\xd5\x56\xc0\x01\xb6\x3e\xe9\x40\x4d\x3c\x2f\xd4\x98\xcb\xf4\x1d\xc8\x35\xe2\x09\x4f\x47\x17\x94\xfd\xae\xdc\xaa\x59\x97\xb7\xb4\x92\x60\xb3\xa7\x27\x3a\xac\xef\xc5\xcb\xe1\xf6\xd3\xe3\x4b\x8a\xfd\x37\x00\x00\xff\xff\x4f\x29\x28\x26\x82\x0f\x00\x00")

func interfaceTxtTemplateBytes() ([]byte, error) {
	return bindataRead(
		_interfaceTxtTemplate,
		"Interface.txt.template",
	)
}

func interfaceTxtTemplate() (*asset, error) {
	bytes, err := interfaceTxtTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Interface.txt.template", size: 3970, mode: os.FileMode(438), modTime: time.Unix(1572175195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libraryTxtTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x6f\xea\x38\x17\xde\x23\xf1\x1f\x2c\xca\xa2\xd5\x55\xfb\xee\x51\x55\x29\x04\xf7\xd6\xf7\x85\x24\xe3\x98\x4e\xbb\xb2\x4c\x62\x68\xa6\xb9\x09\xe3\x98\xb9\xad\x50\xfe\xfb\x28\xb1\x1d\x08\x49\xb8\x85\x81\x05\x8b\xf8\x3c\xe7\xe3\x39\x1f\x3e\xce\xb8\xbc\xf6\xe7\x63\x0f\xbb\x3f\xa8\x63\xcd\x20\xe8\xfc\x6d\xb7\x77\x0e\xfb\xc9\xf3\xfc\xa6\xdf\x2b\x50\xc3\xed\x3e\x2e\x2f\xff\x7d\xcf\xb2\x61\x1b\x2a\x5b\xb3\x40\x41\xdb\xc1\xf6\xcb\x0b\xf5\x89\xe5\x4c\x2c\x3c\xa9\x81\xed\x8f\x0f\x5f\xb2\x24\x64\x22\xec\xb4\x5c\x80\xe1\x0b\x81\x8e\x8f\x5c\xc7\xaf\x83\xe1\x87\xe4\x49\x16\xa5\x49\x76\x14\x6e\x6c\x53\x0c\xff\x98\x23\x0c\x27\x07\xb6\x31\xff\x7b\x13\x09\x1e\x1e\x09\x61\x66\xfd\x70\x31\x7d\x86\xb8\xf0\x62\x3f\x84\x19\xfb\x2b\x15\xcf\x5c\x14\x5e\x74\x3a\x31\x43\x4e\x07\x3a\x4a\x7e\x8f\xf6\x2c\x62\x3f\xb5\xa1\x3d\x26\x83\xb7\x7d\x74\xbf\x77\x05\x50\x92\x71\x21\xc1\x1b\x17\x1c\x7c\xa6\x1b\x01\xb2\x74\x23\x02\x0e\x96\x51\xcc\xb3\x76\x03\x4f\xd0\x9a\x40\xec\xf7\x7b\x85\xde\xc1\xa0\x93\x04\xdf\x9d\x63\x1b\xd6\xe5\xae\xc0\xd5\x7f\xfb\x81\xab\x42\x89\xbb\x96\x45\x1a\xcf\x55\xa6\x94\x5c\xc0\x93\x7e\x2f\x4a\x82\x78\x13\xf2\x6b\xe5\xd1\x13\x8f\xd7\x5c\x64\x37\xfd\xde\x8a\x27\x5c\x30\xc9\xe9\x82\x65\x51\x40\x53\xe5\x30\x8d\xa3\x85\x60\xe2\xf3\x90\xab\xce\x64\xac\x79\x10\x2d\xa3\x65\x00\xb4\x02\xb0\x4c\x05\x58\x6c\xa2\x38\x1c\x15\x80\xbb\x53\x7e\x17\xe4\x7f\xaa\xc2\x00\xff\xa8\x6a\x3a\x55\xe9\x05\xf9\x6f\x2b\x3c\x5d\xfb\xaa\xf0\x86\xdb\xa3\xcd\x99\xdf\xb5\x08\xec\xf7\x5f\x9b\x40\xad\xc5\x4c\xf2\x7c\x2e\x55\x66\x80\xfc\x5c\x73\x20\x53\xa0\x93\x0d\x24\x13\x2b\x2e\xfb\xbd\x68\xd9\x70\x75\x3c\x47\xd3\x09\xf5\x9f\x2c\x0c\x27\x37\xca\xe1\xb6\x88\x88\x85\xbf\x43\x42\xc9\xab\x07\xc1\x40\x49\x17\xfd\xc4\xe3\x8c\x5f\x7f\x19\x46\x2c\x82\xec\x12\x96\x84\xd1\xf2\x5a\xf5\xad\x14\x51\xb2\xba\x26\xee\xd4\xfd\x13\xe2\x16\xb2\xf6\x54\xe4\xe0\xc8\x21\x2d\x15\x94\x3a\x2f\x56\x65\x05\xa3\x2c\x8e\x35\x7f\x7a\x32\x7d\xbd\xe9\x2f\x5c\x65\xa6\x9c\xea\x14\x58\xd3\x29\xf5\xb1\xed\x77\x15\x9b\x1e\x96\x79\xd7\xb9\x1e\x92\xf9\x25\xa7\xa3\x2d\x38\x93\xdc\xd0\x56\x4d\x8c\xaf\x2a\xbf\x20\x6f\xbb\x49\x61\x7a\x80\x85\x61\x35\x04\x5b\x19\xed\x22\x6a\xbf\x10\xbb\x64\x4c\x32\x0c\x9b\x30\x61\x8b\x98\x03\xfb\xdb\x37\x90\xe9\xcb\xbb\xcc\x25\x55\xde\xd0\xb5\x48\xd7\x5c\xc8\x88\x67\xed\xbe\x00\x0f\xbb\x1e\xc4\x04\x99\x5b\xac\x7d\x35\x69\x3a\xb2\x2f\x97\xef\xa0\xcd\xc5\xa4\x1d\xba\x93\xcb\x9b\x76\x77\x6b\xc9\x71\xbb\x95\x5c\xb5\xa6\x9c\x1d\x36\x9e\x3b\x04\xcd\x20\x75\xe7\xc4\x9b\x13\x3a\x41\x18\xda\xc4\xc5\xaf\x60\x30\xdc\x16\x30\x68\x13\x3a\x46\x8e\x85\x5f\x8b\xb3\xfc\x7f\x8b\x28\x19\x28\xa4\x85\xed\x27\xf4\xfc\x75\x64\x1c\x2d\x34\x72\x8a\xc6\xb8\xf8\x7c\x3a\x52\x23\x9a\x1b\xec\xe0\x20\xce\xe1\xfd\xf0\xde\x76\x9d\x47\xf4\x7d\x34\xe1\x8b\xcd\xea\x61\x14\x3e\xa8\x35\x45\x13\xa5\x2f\x77\x1a\x46\x82\x07\x32\x15\x9d\x8c\xa9\x8f\x1e\x46\xcf\x16\x29\x8c\x0e\xef\xd5\x60\x47\x0e\x81\xf8\xd1\xb2\xe1\x68\xb8\xb5\x67\xd6\xff\x21\xb5\xe7\x18\x43\x87\xe8\xbe\x2f\x5d\x7f\x50\xe8\x4a\xf6\x2c\xf4\x5e\x35\xde\x23\xc7\x27\x45\x2b\xec\xf0\x3a\x90\x87\x4b\x4e\x19\x94\x64\x92\xc5\x71\x94\xac\xce\xd2\x77\xd1\x29\xa3\x27\x1e\xff\x58\xa7\x42\xea\x59\x93\x15\xcb\x59\xe9\xa2\xce\x99\x9a\x20\x7e\x7b\xee\xe0\x8b\xe7\x62\xd2\x48\xec\xad\xd6\xb5\x5b\xd0\x0a\x85\xe0\x8d\xb3\x90\x8b\x86\x85\x47\x34\x85\xfe\x6f\x2f\x81\x09\xf4\x09\x72\x2c\x52\xac\xe7\x4d\xd9\x5d\xf2\xec\xe9\x7c\x02\xa9\x87\xe1\x23\x7a\xd9\x5f\x32\xd2\x8d\x04\x6b\x26\xdf\x4e\x0b\x50\xf7\x70\xcd\xfa\x11\xf3\x63\xe4\x18\xd3\xb5\x4e\xfe\x2a\x7e\x8a\xc6\x75\xbc\xee\xe7\x33\xf0\xd5\x03\xc3\x48\xea\x38\x69\x41\x77\xa3\xa9\x6f\x8f\x5e\x1d\x6a\x4d\xa9\xd2\x7a\x17\xfc\x64\xef\xdc\x3c\x4d\x74\x15\x05\x69\xb2\x8c\x56\x46\x04\x94\x22\xe5\x7b\xe8\x90\x6f\x53\x33\x2d\x03\xe1\xb6\xaa\x41\x53\x17\xbb\x89\xdf\x16\x86\x26\x69\xff\xdd\xdc\x8c\xa3\x3a\xcd\x47\xa3\x53\x4a\x49\xcd\x8e\x7a\x21\xd5\x62\x35\xaf\x3d\xf3\x98\xb1\x67\xec\x9d\x7b\x2c\x78\x67\x2b\x6e\x97\x12\xbb\x87\xcd\x2f\x11\x55\xaf\x9a\xb5\x12\xa1\xfa\x19\x40\x0b\x35\x9a\x9b\x8e\x29\x7d\x48\x93\xe6\x5a\x2b\xd0\xe9\x50\x1a\xcc\x0b\x76\xb8\x2d\xbf\xde\x4a\x9e\xc9\x5b\xbd\x3a\x54\xbb\xb7\xbe\x1e\xdd\x99\x67\x11\x34\x46\x53\x44\x5e\x81\x95\x7c\x3a\xfc\x17\x37\x0f\xe5\x32\x60\x65\x67\x23\x78\xe5\xb3\xfa\xd2\xe1\x32\x76\x5d\xa2\x1c\x2e\x6d\x77\xb8\xad\xdc\xbd\xab\x2e\xbb\x93\x62\xae\xc5\x6a\x32\x75\x7e\x3e\xcd\x64\x3a\x4c\x68\x63\x3c\xed\xae\x8b\xf3\xdd\xbd\x4c\x82\xcf\x09\xf6\xdf\x00\x00\x00\xff\xff\xb1\x73\x70\x4d\xa3\x12\x00\x00")

func libraryTxtTemplateBytes() ([]byte, error) {
	return bindataRead(
		_libraryTxtTemplate,
		"Library.txt.template",
	)
}

func libraryTxtTemplate() (*asset, error) {
	bytes, err := libraryTxtTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Library.txt.template", size: 4771, mode: os.FileMode(438), modTime: time.Unix(1572173574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _optionhelpersCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\xdf\x6b\xc2\x30\x10\xc7\xdf\x05\xff\x87\xa3\xdd\x83\xbe\xcc\xbf\xa1\xad\x95\x86\xd5\x4e\xfc\x01\x7b\x0b\xd7\xf6\x9c\xc1\x98\x8c\x24\xc2\x64\xec\x7f\x1f\x12\x5d\x07\x73\x4c\xa7\x1b\x63\xec\x9e\x0a\xd7\xdc\x7d\x72\xdf\x6f\x2e\x84\xf0\xbc\x80\xb0\xdd\x0a\x21\x23\xac\xc9\x68\x25\x37\xa0\x1f\x9c\xd0\xca\x9e\x54\xd7\x17\xb9\x00\xc9\x0a\x2b\xa3\x3b\xf7\xa4\xc8\xa0\x23\x5e\xa2\x15\x15\xdf\x11\xf1\x45\x03\x59\x44\xc3\xb4\xdb\x6e\x01\x00\x58\x72\x1d\xff\xb5\x8d\xab\xa7\x6d\xea\x99\xb3\x62\x32\x8d\xf2\x9c\x27\xc3\xe8\x26\xe5\xa3\x71\x3a\x60\x77\xcd\x5f\x81\x14\x65\xaf\x5a\xe1\x92\x7a\xbb\x03\x41\x93\x4c\xa2\x24\x4b\x61\x14\x4d\x33\x08\x98\xb2\x0e\xa5\xc4\x2d\x00\xd4\xc2\x50\xe5\xb4\xd9\xc0\x5c\x1b\x48\x86\xb8\x24\x98\x0b\x49\x36\x38\x0a\x85\x15\x49\x3e\xeb\x1f\x80\x11\xaa\x92\xeb\xfa\x0c\x14\x3f\x98\x86\x85\x54\xed\x07\xd9\x6d\xb7\x2e\x24\x4c\x08\xb9\x28\x0d\x9a\xaf\xf9\xe3\xc7\x2c\x22\x77\x90\x6f\xfc\xe1\x53\x9d\xbd\x1a\xf1\x8c\xe5\x7d\x3e\xc9\xa2\x71\xda\x87\x20\x5e\x0b\x59\x83\x5b\xd0\x5e\x2d\x40\x0b\x76\x81\x86\xea\xeb\x00\x6e\x07\x83\x7f\x93\x7d\x64\xb2\xcf\x59\x62\x56\xbc\xe7\x28\x85\x3a\xbd\x37\x3d\x52\xb5\x76\x58\x1e\xdd\x3a\x67\xf1\x41\x3d\x4e\x6f\xed\x1d\x25\xbe\xf1\x61\xa5\xaf\x97\xfb\xc5\xbb\xb7\x51\xe0\xf8\xdd\xfb\x97\xf5\x7f\x09\x00\x00\xff\xff\x49\x56\x7a\x2c\x78\x07\x00\x00")

func optionhelpersCmakeBytes() ([]byte, error) {
	return bindataRead(
		_optionhelpersCmake,
		"OptionHelpers.cmake",
	)
}

func optionhelpersCmake() (*asset, error) {
	bytes, err := optionhelpersCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "OptionHelpers.cmake", size: 1912, mode: os.FileMode(438), modTime: time.Unix(1572094457, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _targetconfigCmakeInTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xf0\xcc\x2b\x4e\x2d\x2a\x51\xa8\xcc\x2f\x2d\x52\x48\xce\x4f\x49\x55\xc8\x48\x2d\x4a\x55\xc8\x4c\x03\x89\x28\xe4\xa5\xa6\xa6\xf0\x72\x29\x2b\xe8\x11\x02\xbc\x5c\x20\x65\x8e\x29\x29\x0a\x25\x19\xa9\x0a\x25\x89\x45\xe9\xa9\x25\xc5\x0a\x69\x99\x39\xa9\xbc\x5c\x99\x79\xc9\x39\xa5\x29\xa9\x1a\x4a\x2a\xd5\xce\xbe\x8e\xde\xae\xf1\xce\xa1\x41\x41\xae\x7e\x21\xf1\x3e\x9e\xc1\x21\xf1\x2e\x9e\x41\xb5\xfa\x0e\xc1\xa1\x4e\x01\x41\xfe\x5e\xf1\x21\x8e\x41\xee\xae\x21\xc1\xf1\x6e\x9e\x3e\xae\x0e\x4a\x9a\x80\x00\x00\x00\xff\xff\xa8\x2b\xbb\xad\x9f\x00\x00\x00")

func targetconfigCmakeInTemplateBytes() ([]byte, error) {
	return bindataRead(
		_targetconfigCmakeInTemplate,
		"TargetConfig.cmake.in.template",
	)
}

func targetconfigCmakeInTemplate() (*asset, error) {
	bytes, err := targetconfigCmakeInTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TargetConfig.cmake.in.template", size: 159, mode: os.FileMode(438), modTime: time.Unix(1572095008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"BuildHelpers.cmake":             buildhelpersCmake,
	"Executable.txt.template":        executableTxtTemplate,
	"General.txt.template":           generalTxtTemplate,
	"Interface.txt.template":         interfaceTxtTemplate,
	"Library.txt.template":           libraryTxtTemplate,
	"OptionHelpers.cmake":            optionhelpersCmake,
	"TargetConfig.cmake.in.template": targetconfigCmakeInTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"BuildHelpers.cmake":             &bintree{buildhelpersCmake, map[string]*bintree{}},
	"Executable.txt.template":        &bintree{executableTxtTemplate, map[string]*bintree{}},
	"General.txt.template":           &bintree{generalTxtTemplate, map[string]*bintree{}},
	"Interface.txt.template":         &bintree{interfaceTxtTemplate, map[string]*bintree{}},
	"Library.txt.template":           &bintree{libraryTxtTemplate, map[string]*bintree{}},
	"OptionHelpers.cmake":            &bintree{optionhelpersCmake, map[string]*bintree{}},
	"TargetConfig.cmake.in.template": &bintree{targetconfigCmakeInTemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
